
name: Node CI
on:
  push:
    # Publish `master` as Docker `latest` image.
    branches:
      - master
    # Publish `v1.2.3` tags as releases.
    tags:
      - v*
  # Run tests for any PRs.
  pull_request:
env:
  IMAGE_NAME: forum-api
  PGHOST_TEST: localhost
  PGUSER_TEST: postgres
  PGDATABASE_TEST: forumapi_test
  PGPASSWORD_TEST: devsecretpassword
  PGPORT_TEST: 5432
  ACCESS_TOKEN_KEY: 7336763979244226452948404D6251655468576D5A7134743777217A25432A462D4A614E645266556A586E3272357538782F413F4428472B4B6250655368566B
  REFRESH_TOKEN_KEY: 6E3272357538782F413F4428472B4B6250655368566B5970337336763979244226452948404D635166546A576E5A7134743777217A25432A462D4A614E645267
  ACCCESS_TOKEN_AGE: 3000
  HOST: localhost
  PORT: 5000
jobs:
  build:
    runs-on: ubuntu-20.04
    # Service containers to run with `runner-job`
    services:
      # Label used to access the service container
      postgres:
        # Docker Hub image
        image: postgres:13-alpine
        # Provide the password for postgres
        env:
          POSTGRES_PASSWORD: devsecretpassword
          POSTGRES_DB: forumapi_test
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          # Maps tcp port 5432 on service container to the host
          - 5432:5432
    strategy:
      matrix:
        node-version: [14.x, 16.x]
    steps:
    - uses: actions/checkout@v2
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v2
      with:
        node-version: ${{ matrix.node-version }}
    - name: Yarn Install
      run: yarn --frozen-lockfile
    - name: Lint
      run: yarn lint
    - name: Migrate
      run: yarn migrate:test up
    - name: Test
      run: yarn test:ci --coverage
    - name: Codecov
      if: ${{ matrix.node-version == '14.x'}}
      run: |
        curl -Os https://uploader.codecov.io/latest/linux/codecov
        chmod +x codecov
        ./codecov
    #- name: Run use pm2
    #  run: |
    #    npm install pm2@latest -g
    #    pm2 start src/ --name forum_api
    #    pm2 ls
    #- uses: matt-ball/newman-action@v0.2.4
    #  with:
    #    collection: postman/forumapi.postman_collection.json
    #    environment: postman/forumapi.postman_environment.json
    #- name: Stop server
    #  run: pm2 stop forum_api
    #- name: Generate Docs
    #  run: yarn docs
    #- name: Publish to Github Pages
    #  if: ${{ github.event_name == 'push' && matrix.node-version == '14.x' }}
    #  uses: JamesIves/github-pages-deploy-action@4.1.5
    #  with:
    #    branch: gh-pages # The branch the action should deploy to.
    #    folder: docs # The folder the action should deploy.
  docker-push:
    # Ensure test job passes before pushing image.
    needs: build
    runs-on: ubuntu-20.04
    if: github.event_name == 'push'
    steps:
    - uses: actions/checkout@v2
    - name: Login to Docker Hub
      uses: docker/login-action@v1
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_TOKEN }}
    - name: Log in to the Container registry
      uses: docker/login-action@v1
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    - name: Extract metadata (tags, labels) for Docker
      id: meta
      uses: docker/metadata-action@v3
      with:
        images: |
          berviantoleo/${{ env.IMAGE_NAME }}
          ghcr.io/${{ github.repository }}
    - name: Build and push Docker images
      uses: docker/build-push-action@v2
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
  aws-eks-push:
    # Ensure test job passes before pushing image.
    needs: build
    runs-on: ubuntu-20.04
    if: github.event_name == 'push'
    steps:
    - uses: actions/checkout@v2
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ap-southeast-1
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1
    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: forum-api
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
      